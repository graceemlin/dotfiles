#+title:        Personal Emacs(XWM) Writing Studio Configuration
#+property:     header-args:elisp :tangle init.el :comments yes :results silent :eval no
#+startup:      content

The complete standard configuration files for the Emacs Writing Studio (EWS) are available at https://github.com/pprevos/emacs-writing-studio. 

To ensure ease of comprehension, the majority of the original annotations remain preserved within this document.

Modifications to the original include:
- EXWM integration for tiling window management
- Automated code snippet insertion for competitive programming
- LSP support for intelligent code completion
- Workflow-specific optimizations
  
The =init.el= file can be generated using =M-x org-babel-tangle= , and changes can be synchronized back to this document with =M-x org-babel-detangle=.

#+begin_src elisp :exports none
  ;;; init.el --- Modified Emacs Writing Studio init -*- lexical-binding: t; -*-
  ;; Emacs Writing Studio (https://github.com/pprevos/emacs-writing-studio/) configuration for personal use.
  ;; Modified by G.R. Emlin : March 2025
  ;;
  ;; This file is NOT part of GNU Emacs.
  ;;
  ;; This program is free software; you can redistribute it and/or modify
  ;; it under the terms of the GNU General Public License as published by
  ;; the Free Software Foundation, either version 3 of the License, or
  ;; (at your option) any later version.
  ;;
  ;; This program is distributed in the hope that it will be useful,
  ;; but WITHOUT ANY WARRANTY; without even the implied warranty of
  ;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
  ;; GNU General Public License for more details.
  ;;
  ;; You should have received a copy of the GNU General Public License
  ;; along with this program. If not, see <https://www.gnu.org/licenses/>.
#+end_src

* Init and EXWM

The first part of this configuration covers package management, the user interface look and feel, and my EXWM setup.

** Early init

This code block configures the default Emacs directory and launches the picom compositor for visual effects.

#+begin_src elisp :exports none
  ;; Set the default Emacs directory and launch the 'picom' compositor.
#+end_src
#+begin_src elisp
  (setq default-directory "~/")
  (start-process "exec --no-startup-id picom -b" nil "picom")
#+end_src

This configuration uses personalized elisp functions to provide granular control over window transparency in EXWM.

#+begin_src elisp :exports none
  ;; Loads EXWM background settings
#+end_src  
#+begin_src elisp
  (set-frame-parameter nil 'alpha-background 75)
  (add-to-list 'default-frame-alist '(alpha-background . 75))

  (defun increase-window-transparency () "Increase window alpha-background (make it less transparent)." (interactive) 
         (let ((current-alpha (frame-parameter nil 'alpha-background))) 
           (if (< current-alpha 100) 
               (set-frame-parameter nil 'alpha-background (min 100 (+ current-alpha 5))) 
             (message "Alpha-background is already at maximum (100)."))))

  (defun decrease-window-transparency () "Decrease window alpha-background (make it more transparent)." (interactive) 
         (let ((current-alpha (frame-parameter nil 'alpha-background))) 
           (if (> current-alpha 0) 
               (set-frame-parameter nil 'alpha-background (max 0 (- current-alpha 5))) 
             (message "Alpha-background is already at minimum (0)."))))

  (defun toggle-window-transparency () "Toggle transparency." (interactive) 
         (let ((current-alpha (frame-parameter nil 'alpha-background))) 
           (if (= current-alpha 100) 
               (set-frame-parameter nil 'alpha-background 0) 
             (set-frame-parameter nil 'alpha-background 100))))

  (defun set-window-transparency (alpha) "Set window alpha-background to ALPHA (0-100)." (interactive "nAlpha-background (0-100): ") 
         (let ((alpha (max 0 (min 100 alpha)))) 
           (set-frame-parameter nil 'alpha-background alpha) 
           (message "Alpha-background set to %d" alpha)))

  (global-set-key (kbd "C-c t i") 'increase-window-transparency)
  (global-set-key (kbd "C-c t d") 'decrease-window-transparency)
  (global-set-key (kbd "C-c t s") 'set-window-transparency)
  (global-set-key (kbd "C-c t a") 'toggle-window-transparency)
  (toggle-frame-maximized)
#+end_src

** Emacs packages

This part of the configuration sets the essential elements to load and install packages from the MELPA archive (=melpa.org=).

#+begin_src elisp :exports none
  ;; Set package archives
#+end_src
#+begin_src elisp
  (use-package package 
    :config (add-to-list 'package-archives '("melpa" . "https://melpa.org/packages/")) 
    (package-initialize))
#+end_src

John Wiegley's Use-Package simplifies installing and configuring packages with a standardized and easy-to-read method.

The Use-Package system consists of a set of statements between parentheses, which is a macro. In its simplest form, it is something like ~(use-package <package-name>)~. The code can also contain one or more sections to set various options. The =:custom= section below sets three variables. These variables enact three protocols. Any missing package is automatically installed from its online source, and the source code is compiled to speed up Emacs. Thirdly, compilation warnings are kept to a minimum so as not to scare beginning users with log files.

#+begin_src elisp :exports none
  ;; Package Management
#+end_src
#+begin_src elisp
  (use-package use-package 
    :custom (use-package-always-ensure t) 
    (package-native-compile t) 
    (warning-minimum-level :emergency))
#+end_src

To read the finer details of the Use-Package macro, read the manual with =C-h R use-package=.

** EXWM Setup

Through the integration of EXWM, Emacs is repurposed as a highly customizable tiling window manager. EXWM allows for keybinding customization with =exwm-input-global-keys=.

#+begin_src elisp :exports none
  ;; Enable EXWM and configure EXWM Keybindings
#+end_src  
#+begin_src elisp
  (if (y-or-n-p "Enable EXWM as your window manager? ")
      (use-package exwm
        :init
        (setq exwm-input-global-keys `(([?\s-r] . exwm-reset)
                                       ([?\s-s] . exwm-workspace-switch)
                                       ([s-left] . windmove-left)
                                       ([s-right] . windmove-right)
                                       ([s-up] . windmove-up)
                                       ([s-down] . windmove-down)
                                       ,@(mapcar (lambda (i) 
                                                   `(,(kbd (format "s-%d" i)) . (lambda () 
                                                                                  (interactive) 
                                                                                  (exwm-workspace-switch-create ,i)))) 
                                                 (number-sequence 0 9))
                                       ([?\s-&] . (lambda (command) 
                                                    (interactive (list (read-shell-command "$ "))) 
                                                    (start-process-shell-command command nil command)))
                                       ([?\s-d] . (lambda () 
                                                    (interactive) 
                                                    (dired default-directory)))
                                       ([?\s-b] . exwm-workspace-switch-to-buffer)
                                       ([?\s-o] . (lambda () 
                                                    (interactive) 
                                                    (start-process "" nil "nyxt")))
                                       ([?\s-x] . (lambda () 
                                                    (interactive) 
                                                    (start-process "" nil "st")))))
        (exwm-enable)
        :config
        (exwm-randr-mode)
        (exwm-workspace-switch-create 1))
    (message "EXWM not enabled. Continuing with Emacs configuration."))
#+end_src

** Look and feel

Initializes the first workspace as a landing page, and sets up the exwm-modeline package. The background image is set with feh.

#+begin_src elisp :exports none
  ;;; LOOK AND FEEL
  ;; Improves EXWM appearance and defines a function to set the wallpaper using 'feh'.
#+end_src
#+begin_src elisp
  (use-package exwm-modeline
    :config
    (exwm-modeline-mode 1))
  ;;(exwm-systemtray-mode 1)

  (defun set-wallpaper () 
    (interactive) 
    (start-process-shell-command "feh" nil  "feh --bg-scale ~/.emacs.d/background.jpg"))
  (set-wallpaper)
#+end_src

EWS espouses a minimalist aesthetic to provide a distraction-free environment. 

#+begin_src elisp :exports none
  ;; Minimal defaults
#+end_src
#+begin_src elisp
  (setq inhibit-startup-message t)
  (menu-bar-mode 1)
  (tool-bar-mode -1)
  (auto-insert-mode t)
  (setq-default indent-tabs-mode t)
  (setq-default tab-width 4)
  (setq display-line-numbers-mode t)
#+end_src

I have modified the default configuration to include additional status indicators for use in EXWM.

#+begin_src elisp :exports none
  ;; Useful status indicators
#+end_src
#+begin_src elisp
  (setq display-time-day-and-date t)
  (display-time-mode 1)
  (line-number-mode 1)
  (column-number-mode 1)
  (size-indication-mode 1)
  (display-battery-mode 1)
#+end_src

Vanilla Emacs has the slightly paternalistic habit of requiring a single =y= or =n= answer, while on some occasions, it requires you to type =yes= or =no=, due to the perceived higher risk of typing the wrong answer. The ~setq~ function sets the ~use-short-answers~ variable to =t=. If you want to retain this behaviour, change the =t= to =nil=.

In Emacs Lisp, =t= means TRUE and =nil= is equivalent to FALSE. Emacs documentation often mentions setting a value to "non-nil", which is a double negative to suggest setting the variable to true.

#+begin_src elisp :exports none
  ;; Short answers only please
#+end_src
#+begin_src elisp
  (setq-default use-short-answers t)
#+end_src

The spacious padding package creates space around windows, preventing crammed text on your screen. The =:init= section contains code Emacs evaluates when loading the package. In this case, it enables the Spacious Padding mode. The =:custom= section also sets the line spacing to a more generous value. You can read the manual for this mode with =C-h R spacious=.

This configuration also modifies the ~line-spacing~ variable to create some space between logical lines. This variable is not part of the Spacious Padding package.

#+begin_src elisp :exports none
  ;; Spacious padding
#+end_src
#+begin_src elisp
  ;;(use-package spacious-padding 
  ;; :custom (line-spacing 3) 
  ;; :init (spacious-padding-mode 1))
#+end_src

The next package sets the Emacs theme. A theme is a set of configurations for fonts and colors. Themes are available in two types: light or dark background.

The Modus themes package is highly configurable. This Use-Package declaration contains a three sections. The =:custom= section customizes variables used in the package. In this case, we instruct the package to use italic and bold fonts for emphasis and allow for fonts with fixed and variable pitch. The code also slightly increases the size of headings. You can toggle between a dark and a light version of this theme, and the last variable defines which to toggle between. EWS uses the tinted version of the themes, which you can modify.

The =:custom= section of the macro sets some variables to define fonts. This section also defines which themes are toggled when switching between light and dark themes with =C-c w t t=. The default is the Modus tinted themes. If you want your configuration to default to the Modus high-contrast themes or one of the two color blindness-safe themes, customize the ~modus-themes-to-toggle~ variable. To see the possible options for the Modus themes, use the help file: =C-h v modus-themes-collection=.

The following section binds some keys to commands to toggle between dark and light or select any available modus themes. All EWS custom keybindings start with =C-c w= as the prefix key and =C-c w t= as the prefix key for the theme-related functions. You can obviously change these to suit your preferences. Read the Modus Themes package manual for details with =C-h R modus=.

The ~consult-theme~ command invokes the consult package to help you select between installed themes.

As a bonus, this code also installs Port's Ef-Themes package, which is a wonderful collection of light and dark themes.

To set a default theme, run the ~customize-themes~ command and select your preferred version. Click the button to store your chosen default in the =custom.el= file

#+begin_src elisp :exports none
  ;; Modus and EF Themes
#+end_src
#+begin_src elisp
  (use-package modus-themes 
    :custom (modus-themes-italic-constructs t) 
    (modus-themes-bold-constructs t) 
    (modus-themes-mixed-fonts t) 
    (modus-themes-to-toggle '(modus-operandi-tinted modus-vivendi-tinted)) 
    :bind (("C-c w t t" . modus-themes-toggle) 
           ("C-c w t m" . modus-themes-select) 
           ("C-c w t s" . consult-theme)))

  (use-package ef-themes)
  ;;(load-theme 'ef-maris-light t)
  ;;(load-theme 'ef-winter t)
  (load-theme 'ef-elea-dark t)
#+end_src

The next section hooks the Variable Pitch mode to any Org buffer. This means that written prose is displayed in variable pitch, while metadata, code and other items are in fixed pitch. A hook is a construction in Emacs that associates modes with each other. In this case, variable pitch text is enabled for all text mode buffers.

#+begin_src elisp :exports none
  ;; Mixed-pich mode
#+end_src
#+begin_src elisp
  (use-package mixed-pitch 
    :hook (org-mode . mixed-pitch-mode))
#+end_src

This last code snippet in the look-and-feel section changes how Emacs automatically split windows to favour vertical splits over horizontal ones to improve readability. This section also installs the Balanced Windows package, which manages window sizes automatically. For example, when you have three open windows and you close one, the remaining windows each get half the screen.

#+begin_src elisp :exports none
  ;; Window management
  ;; Split windows sensibly
#+end_src
#+begin_src elisp
  (setq split-width-threshold 120 split-height-threshold nil)
#+end_src
#+begin_src elisp  :exports none
  ;; Keep window sizes balanced
#+end_src
#+begin_src elisp
  (use-package balanced-windows 
    :config (balanced-windows-mode))
#+end_src

** Basic configuration

To maintain a clean and predictable initialization process, user customizations are segregated into a =custom.el= file. This strategy insulates the core =init.el=  file from automated modifications. In the case of conflicting variable definitions, the =init.el= file asserts precedence.

#+begin_src elisp :exports none
  ;; Custom settings in a separate file and load the custom settings
#+end_src  
#+begin_src elisp
  (setq-default custom-file (expand-file-name "custom.el" user-emacs-directory))

  (load custom-file 
        :no-error-if-file-is-missing)
#+end_src

Keyboard shortcuts defined in EWS all use the =C-c w= prefix. Access the ~customize-variable~ function with the =C-c w v= shortcut.

#+begin_src elisp
  (keymap-global-set "C-c w v" 'customize-variable)
#+end_src

* Programming

This section details my programming related modifications to the default EWS configuration.

** Accessibility
  
This configuration streamlines Emacs navigation through the integration of Treemacs for project tree visualization, Ace-Window for rapid window switching, and Avy for precise, character-level jumping.

#+begin_src elisp :exports none
  ;; Navigation
#+end_src
#+begin_src elisp
  (use-package treemacs)

  (use-package ace-window 
    :bind ("M-o" . #'ace-window))

  (use-package avy 
    :bind ("C-c z" . #'avy-goto-word-1))

  (use-package exwm-edit)
#+end_src

Aesthetic and functional enhancements are implemented via Powerline for a visually rich status bar, and Nerd Icons for comprehensive glyph support.

#+begin_src elisp :exports none
  ;; Misc QoL improvements
#+end_src
#+begin_src elisp
  (use-package powerline)

  (use-package nerd-icons 
    :ensure t)
#+end_src

** Auto-insertion

To expedite competitive programming workflows, context-aware code skeletons are automatically inserted upon file creation. This feature leverages Emacs's built-in auto-insert functionality to provide language-specific templates.

#+begin_src elisp :exports none
  ;; Codeforces Skeletons
#+end_src
#+begin_src elisp
  (auto-insert-mode t)
  (eval-after-load 'autoinsert '(define-auto-insert '("\\.\\(CC?\\|cc\\|cxx\\|cpp\\|c++\\)\\'" . "C++ skeleton") 
                                  '(\n "#include <bits/stdc++.h>" \n \n "using namespace std;" \n \n "int main(int argc, char* argv[]) {" \n "ios::sync_with_stdio(0)\;" \n "cin.tie(0)\;" \n > _ \n "}" > \n)))

  (eval-after-load 'autoinsert '(define-auto-insert '("\\.c\\'" . "C skeleton") 
                                  '(\n "#include <stdio.h>" \n "int main(){" > \n > _ \n "}" > \n)))

  (eval-after-load 'autoinsert '(define-auto-insert '("\\.go\\'" . "Go skeleton") 
                                  '(\n "package main\;" \n "import \"fmt\"\;" \n "func main(){" > \n > _ \n "}" > \n)))
#+end_src

** LSP Client Setup and Code Completion

This configuration uses Eglot as its LSP Client.

#+begin_src elisp :exports none
  ;; Eglot Setup
#+end_src
#+begin_src elisp
  (use-package eglot 
    :hook ((prog-mode) . eglot-ensure))
#+end_src

Company provides seemless code-completion.

#+begin_src elisp :exports none
  ;; Company-mode for code-completion
#+end_src
#+begin_src elisp
  (use-package company 
    :after lsp-mode 
    :config (setq company-minimum-prefix-length 1) 
    (setq company-idle-delay 0.0))
#+end_src

Programming mode hooks are configured to ensure a consistent and productive development environment across various programming languages.

#+begin_src elisp :exports none
  ;; Prog-mode setup
#+end_src
#+begin_src elisp
  (use-package rainbow-delimiters)
  (add-hook 'prog-mode-hook (lambda () 
                              (display-line-numbers-mode t) 
                              (company-mode) 
                              (rainbow-delimiters-mode) 
                              (eglot-ensure)))
#+end_src

Geiser is configured to interface with the MIT Scheme binary.

#+begin_src elisp :exports none
  ;; Geiser setup for SICP
#+end_src
#+begin_src elisp
  (setq geiser-mit-binary "/usr/bin/scheme")
#+end_src

** Version Control

Jonas Bernoulli's Magit is an exceptionally useful git porcelain for Emacs. 

#+begin_src elisp :exports none
  ;; Magit for Version Control
#+end_src
#+begin_src elisp
  (use-package magit 
    :bind ("C-c g" . #'magit-status) 
    :config (setq magit-diff-refine-hunk t))

  (use-package diff-hl 
    :hook (prog-mode . diff-hl-mode))
#+end_src

* Using EWS

This section covers enabling EWS functionality, the minibuffer completion system and basic settings to enable writing for humans.
  
** Emacs Writing Studio functionality

EWS also provides a range of bespoke convenience functions for various aspects of the writing process. Ensure you download this file from the EWS repository.

#+begin_src elisp :exports none
  ;; Load EWS functions
#+end_src
#+begin_src elisp
  (load-file (concat (file-name-as-directory user-emacs-directory) "ews.el"))
#+end_src

The ~ews-missing-executables~ function checks if external software is available on your system. Emacs writes a message in the minibuffer if any of the recommended tools are missing. You can jump to the Messages buffer with =C-h e= to review the output. Emacs will function normally when this software is unavailable, but some features might not work.

The input for this function is a list, a series of strings between parenthesis that starts with a tick symbol: ~'("this" "is" "a" "list")~ The tick prevents Emacs from confusing the list of data with a function. In this function, some lists also contains other lists.

This function checks whether all these packages are available on your system. For software in a nested list, such as =("convert" "gm")=, only one of them has to be available, as these programs are alternatives for the same functionality.

#+begin_src elisp :exports none
  ;; Check for missing external software
  ;;
  ;; - soffice (LibreOffice): View and create office documents
  ;; - zip: Unpack ePub documents
  ;; - pdftotext (poppler-utils): Convert PDF to text
  ;; - ddjvu (DjVuLibre): View DjVu files
  ;; - curl: Reading RSS feeds
  ;; - convert (ImageMagick) or gm (GraphicsMagick): Convert image files  ;; - latex (TexLive, MacTex or MikTeX): Preview LaTex and export Org to PDF
  ;; - hunspell: Spellcheck. Also requires a hunspell dictionary
  ;; - grep: Search inside files
  ;; - gs (GhostScript) or mutool (MuPDF): View PDF files
  ;; - mpg321, ogg123 (vorbis-tools), mplayer, mpv, vlc: Media players
  ;; - git: Version control
#+end_src
#+begin_src elisp
  (ews-missing-executables '("soffice" "zip" "pdftotext" "ddjvu" "curl" ("convert" "gm") "latex" "hunspell" "grep" ("gs" "mutool") 
                             ("mpg321" "ogg123" "mplayer" "mpv" "vlc") "git"))
#+end_src

** Minibuffer completion
EWS uses the Vertico-Orderless-Marginalia stack of minibuffer completion packages in their standard configuration. 

#+begin_src elisp :exports none
  ;; MINIBUFFER COMPLETION

  ;; Enable vertico
#+end_src
#+begin_src elisp
  (use-package vertico 
    :init (vertico-mode) 
    :custom (vertico-sort-function 'vertico-sort-history-alpha))
#+end_src
#+begin_src elisp :exports none
  ;; Persist history over Emacs restarts.
#+end_src
#+begin_src elisp
  (use-package savehist 
    :init (savehist-mode))
#+end_src
#+begin_src elisp :exports none
  ;; Search for partial matches in any order
#+end_src
#+begin_src elisp
  (use-package orderless 
    :custom (completion-styles '(orderless basic)) 
    (completion-category-defaults nil) 
    (completion-category-overrides '((file (styles partial-completion)))))
#+end_src
#+begin_src elisp :exports none
  ;; Enable richer annotations using the Marginalia package
#+end_src
#+begin_src elisp
  (use-package marginalia 
    :init (marginalia-mode))
#+end_src

** Keyboard shortcuts menu
The Which-Key package improves the discoverability of keyboard shortcuts with a popup in the minibuffer.

Due to the naming conventions in Emacs, most functions start with the package name, so some can be long. The problem is that the most interesting part of a function name is at the end of the string, so we don't want that to be hidden. This configuration widens the columns a bit to prevent truncated function names. This configuration also instructs Which-Key to order the list by function name rather than by key. 

#+begin_src elisp :exports none
  ;; Improve keyboard shortcut discoverability
#+end_src
#+begin_src elisp
  (use-package which-key 
    :config (which-key-mode) 
    :custom (which-key-max-description-length 40) 
    (which-key-lighter nil) 
    (which-key-sort-order 'which-key-description-order))
#+end_src

** Improved help functionality
Emacs is advertised as a "self-documenting text editor". While this is not entirely correct (if only computer code could document itself), every aspect of Emacs is documented within the source code.

Emacs has two levels of help. Firstly, there are the manuals for Emacs itself and some of the packages. Also each individual command and function contains documentation. The Helpful package by Wilfred Hughes adds contextual information to the built-in Emacs help. For example, when asking for documentation about a variable, the help file links to its customization screen or the source code.

#+begin_src elisp :exports none
  ;; Improved help buffers
#+end_src
#+begin_src elisp
  (use-package helpful 
    :bind (("C-h f" . helpful-function) 
           ("C-h x" . helpful-command) 
           ("C-h k" . helpful-key) 
           ("C-h v" . helpful-variable)))
#+end_src

** Configure text modes
Emacs is principally designed for developing computer code, so it needs some modifications to enable writing text for humans. The config first ensures that Emacs does not try to install Text-Mode as a package, because it is built-in.

Secondly, we hook Visual Line Mode to Text Mode. Visual Line mode wraps long lines to the nearest word to fit in the current window, as is common in word processing software.

By default, Emacs does not replace text when you select a section and start typing, which is unusual behaviour when writing prose. The =:init= section enables a more common default so that selected text is deleted when typed over. The =:custom= section enables the page-up and page-down keys to scroll to the top or bottom of a buffer. This section also redefines the way Emacs defines a sentence. The last variable saves any existing clipboard text into the kill ring for better operability between the operating system's clipboard and Emacs's kill ring.

#+begin_src elisp :exports none
  ;;; Text mode settings
#+end_src
#+begin_src elisp
  (use-package text-mode 
    :ensure nil 
    :hook (text-mode . visual-line-mode) 
    :init (delete-selection-mode t) 
    :custom (sentence-end-double-space nil) 
    (scroll-error-top-bottom t) 
    (save-interprogram-paste-before-kill t))
#+end_src

** Spellchecking
Writing without automated spell-checking would be quite annoying, even for the most experienced authors. The Flyspell package interfaces with the Hunspell software and the relevant dictionary to check spelling on the fly.

You must change the standard dictionary to your local variety with the ~ews-hunspell-dictionaries~  variable. EWS uses this particular variable because the dictionaries are set in two places to enable multilingual spelling. You can set multiple dictionaries for the same buffer.

#+begin_src elisp :exports none
  ;; Check spelling with flyspell and hunspell
#+end_src
#+begin_src elisp
  (use-package flyspell 
    :custom (ispell-program-name "hunspell") 
    (ispell-dictionary ews-hunspell-dictionaries) 
    (flyspell-mark-duplications-flag nil) ;; Writegood mode does this
    (org-fold-core-style 'overlays) ;; Fix Org mode bug
    :config (ispell-set-spellchecker-params) 
    (ispell-hunspell-add-multi-dic ews-hunspell-dictionaries) 
    :hook (text-mode . flyspell-mode) 
    :bind (("C-c w s s" . ispell) 
           ("C-;"       . flyspell-auto-correct-previous-word)))
#+end_src

** Ricing Org mode
This part of the configuration sets a bunch of variables to improve the design of Org buffers. To learn what these variables do, use =C-h v= and enter the variable name.

Org has a plethora of variables to change its interface. You can add other variables or remove some to make Org look how you prefer. For example, to enable alphabetical lists and numerals, you must customize the ~org-list-allow-alphabetical~ variable to =t=. This adds =a.=, =A.=, =a)= and =A)= as additional options to number a list.

#+begin_src elisp :exports none
  ;;; Ricing Org mode
#+end_src  
#+begin_src elisp
  (use-package org 
    :custom (org-startup-indented t) 
    (org-hide-emphasis-markers t) 
    (org-startup-with-inline-images t) 
    (org-image-actual-width '(450)) 
    (org-fold-catch-invisible-edits 'error) 
    (org-pretty-entities t) 
    (org-use-sub-superscripts "{}") 
    (org-id-link-to-org-use-id t) 
    (org-fold-catch-invisible-edits 'show))
#+end_src

The above code snippet hides emphasis markers from view for an uncluttered screen. Emphasis markers are the symbols used to indicate italics, bold and other font decorations, for example =_italic_=. Hiding the syntax of a plain text document is not ideal because it obfuscates essential information. The Org Appear package by Alice P. Hacker shows hidden markers in Org buffers when the cursor is used for an emphasized word, giving us the best of both worlds.

#+begin_src elisp :exports none
  ;; Show hidden emphasis markers
#+end_src
#+begin_src elisp  
  (use-package org-appear 
    :hook (org-mode . org-appear-mode))
#+end_src

The Org Fragtog package is similar to Org Appear but for LaTeX snippets. It automatically toggles Org mode LaTeX fragment previews as the cursor enters and exits them. By default, the text is small and can become unreadable when changing between dark and light themes.

The =org-format-latex-options= variable controls the way Emacs presents fragments. This variable is a list with properties such as colours and size. The =plist-put= function lets you change options in the list. The foreground and background are set to take the same colour as your text. If you change from dark to light mode or vice versa, you should evaluate the ~org-latex-preview~ function (=C-c C-x C-l=) to change the preview images.

Automated LaTeX previews are disabled because they can delay loading a page and cause trouble when the user does not have LaTeX installed.

#+begin_src elisp :exports none
  ;; LaTeX previews
#+end_src
#+begin_src elisp
  (use-package org-fragtog 
    :after org 
    :hook (org-mode . org-fragtog-mode) 
    :custom (org-startup-with-latex-preview nil) 
    (org-format-latex-options (plist-put org-format-latex-options 
                                         :scale 2) 
                              (plist-put org-format-latex-options 
                                         :foreground 'auto) 
                              (plist-put org-format-latex-options 
                                         :background 'auto)))
#+end_src

The last package to modify Org buffers is Org Modern. However, most of the features have been switched off because it might be better for beginning users not to hide semantic symbols. You can experiment with changing these settings to change the look and feel of Org buffers. 

#+begin_src elisp :exports none
  ;; Org modern: Most features are disabled for beginning users
#+end_src
#+begin_src elisp
  (use-package org-modern 
    :hook (org-mode . org-modern-mode) 
    :custom (org-modern-table nil) 
    (org-modern-keyword nil) 
    (org-modern-timestamp nil) 
    (org-modern-priority nil) 
    (org-modern-checkbox nil) 
    (org-modern-tag nil) 
    (org-modern-block-name nil) 
    (org-modern-keyword nil) 
    (org-modern-footnote nil) 
    (org-modern-internal-target nil) 
    (org-modern-radio-target nil) 
    (org-modern-statistics nil) 
    (org-modern-progress nil))
#+end_src
* Inspiration
** Read e-books
The built-in Doc-View package can read various file formats with the assistance of external software. This configuration increases the resolution of the generated image file and raises the threshold for warning before opening large files to fifty MB ($50 \times 2^{20}$).

Reading PDF files requires the GhostScript or MuPDF package. When the Poppler package is available, you can convert a PDF to text for easier searching and copying. To view DjVu files, you need the DjVuLibre library to parse them.

#+begin_src elisp :exports none
  ;; INSPIRATION

  ;; Doc-View
#+end_src
#+begin_src elisp
  (use-package doc-view 
    :custom (doc-view-resolution 300) 
    (large-file-warning-threshold (* 50 (expt 2 20))))
#+end_src

The Nov package by Vasilij Schneidermann provides valuable functionality for viewing ePub books inside Emacs. The init section ensures that any file with an =epub= extension is associated with this package. An ePub file is essentially a compressed website, so you will need the Zip program to enable reading these files.

#+begin_src elisp :exports none
  ;; Read ePub files
#+end_src
#+begin_src elisp
  (use-package nov 
    :init (add-to-list 'auto-mode-alist '("\\.epub\\'" . nov-mode)))
#+end_src

Emacs can read documents produced by standard office software. To achieve this, it converts these files to PDF with LibreOffice and presents them as such.

A confirmed bug in Org mode (version 9.6.15) overrides the associations between LibreOffice and Doc View mode. The code below is a workaround for reinstating the desired behaviour and associating the various file extensions with Doc View. This bug fix is optional if you use Org 9.7 and beyond.

#+begin_src elisp :exports none
  ;; Reading LibreOffice files

  ;; Fixing a bug in Org Mode pre-9.7
  ;; Org mode clobbers associations with office documents
#+end_src
#+begin_src elisp
  (use-package ox-odt 
    :ensure nil 
    :config (add-to-list 'auto-mode-alist '("\\.\\(?:OD[CFIGPST]\\|od[cfigpst]\\)\\'" . doc-view-mode-maybe)))
#+end_src

** Bibliographies
These lines of code add two field types to BibTeX entries: keywords to help you order your literature and a link to a file so you can read any attachments in Emacs.

The ~ews-register-bibtex~ function assigns all =.bib= files in the ~ews-bibliography-directory~ variable to the list of global BibTeX files. You need to set this variable to the location where you store your bibliography.

#+begin_src elisp :exports none
  ;; Managing Bibliographies
#+end_src
#+begin_src elisp
  (use-package bibtex 
    :custom (bibtex-user-optional-fields '(("keywords" "Keywords to describe the entry" "") 
                                           ("file"     "Relative or absolute path to attachments" "" ))) 
    (bibtex-align-at-equal-sign t) 
    :config (ews-bibtex-register) 
    :bind (("C-c w b r" . ews-bibtex-register)))
#+end_src

The Biblio package enables you to extract literature from various databases.

#+begin_src elisp :exports none
  ;; Biblio package for adding BibTeX records
#+end_src
#+begin_src elisp
  (use-package biblio 
    :bind (("C-c w b b" . ews-bibtex-biblio-lookup)))
#+end_src

Citar is the workhorse package for managing a bibliography and citations. It provides an interface between your text and the bibliography.

#+begin_src elisp :exports none
  ;; Citar to access bibliographies
#+end_src
#+begin_src elisp
  (use-package citar 
    :defer t 
    :custom (citar-bibliography ews-bibtex-files) 
    :bind (("C-c w b o" . citar-open)))
#+end_src

** Reading websites
The Elfeed package helps with reading RSS files, and the Elfeed-Org package lets you configure RSS feeds with an Org file.

#+begin_src elisp :exports none
  ;; Read RSS feeds with Elfeed
#+end_src
#+begin_src elisp
  (use-package elfeed 
    :custom (elfeed-db-directory (expand-file-name "elfeed" user-emacs-directory)) 
    (elfeed-show-entry-switch 'display-buffer) 
    :bind ("C-c w e" . elfeed))
#+end_src
#+begin_src elisp :exports none
  ;; Configure Elfeed with org mode
#+end_src
#+begin_src elisp
  (use-package elfeed-org 
    :config (elfeed-org) 
    :custom (rmh-elfeed-org-files (list (concat (file-name-as-directory (getenv "HOME")) "elfeed.org"))))
#+end_src

The Org-Webtools package makes it easy to insert hyperlinks by converting the content of the kill ring to an Org hyperlink.

#+begin_src elisp :exports none
  ;; Easy insertion of weblinks
#+end_src
#+begin_src elisp
  (use-package org-web-tools 
    :bind (("C-c w w" . org-web-tools-insert-link-for-url)))
#+end_src

** Playing multimedia files
The EMMS (Emacs MultiMedia System) package provides an interface to various multimedia players. You need one of these programs installed: =mpg321=, =ogg123= (vorbis-tools), =mplayer=, =mpv=, or VLC. 

#+begin_src elisp :exports none
  ;; Emacs Multimedia System
#+end_src
#+begin_src elisp
  (use-package emms 
    :config (require 'emms-setup) 
    (require 'emms-mpris) 
    (emms-all) 
    (emms-default-players) 
    (emms-mpris-enable) 
    :custom (emms-browser-covers #'emms-browser-cache-thumbnail-async) 
    :bind (("C-c w m b" . emms-browser) 
           ("C-c w m e" . emms) 
           ("C-c w m p" . emms-play-playlist ) 
           ("<XF86AudioPrev>" . emms-previous) 
           ("<XF86AudioNext>" . emms-next) 
           ("<XF86AudioPlay>" . emms-pause)))
#+end_src

** Opening files with external software
The OpenWith package by Markus Trisk lets you open files in external software. 

#+begin_src elisp
  (use-package openwith 
    :config (openwith-mode t) 
    :custom (openwith-associations nil))
#+end_src

* Ideation
** Org capture
The possibilities for capture templates are extensive and depend on your use cases. This configuration is only an example of the options. The Org documentation provides lots of detail (=C-h R org <ret> capture=). You will also need to customize the ~org-default-notes-file~ variable.

#+begin_src elisp :exports none
  ;; Fleeting notes
#+end_src
#+begin_src elisp
  (use-package org 
    :bind (("C-c c" . org-capture) 
           ("C-c l" . org-store-link)) 
    :custom (org-goto-interface 'outline-path-completion) 
    (org-capture-templates '(("f" "Fleeting note" item (file+headline org-default-notes-file "Notes") "- %?") 
                             ("p" "Permanent note" plain (file denote-last-path) #'denote-org-capture 
                              :no-save t 
                              :immediate-finish nil 
                              :kill-buffer t 
                              :jump-to-captured t) 
                             ("t" "New task" entry (file+headline org-default-notes-file "Tasks") "* TODO %i%?"))))
#+end_src
    
** Denote
Denote is a flexible note-taking and file management package. Refer to the extensive Denote manual with =C-h R denote=. At a minimum, you need to configure the ~denote-directory~ variable to indicate the location of your notes.

The EWS package includes a convenience function to improve how Denote displays links to attachments, linked to the ~denote-link-description-function~.

#+begin_src elisp :exports none
  ;; Denote
#+end_src
#+begin_src elisp
  (use-package denote 
    :defer t 
    :custom (denote-sort-keywords t) 
    (denote-link-description-function #'ews-denote-link-description-title-case) 
    :hook (dired-mode . denote-dired-mode) 
    :custom-face (denote-faces-link ((t (:slant italic)))) 
    :init (require 'denote-org-extras) 
    :bind (("C-c w d b" . denote-find-backlink) 
           ("C-c w d d" . denote-date) 
           ("C-c w d l" . denote-find-link) 
           ("C-c w d h" . denote-org-extras-link-to-heading) 
           ("C-c w d i" . denote-link-or-create) 
           ("C-c w d k" . denote-rename-file-keywords) 
           ("C-c w d n" . denote) 
           ("C-c w d r" . denote-rename-file) 
           ("C-c w d R" . denote-rename-file-using-front-matter)))
#+end_src

The Consult package provides some convenience functionality to make life easier.

The ~consult-org-heading~ command provides a table of contents of the Org mode file to quickly move around a large file. The ~consult-grep~ function lets you search through files in the current directory. The search functionality requires access to the Grep software. 

Consult has a lot more functionality that replaces some base Emacs commands with more convenient version. Most of these have not been enabled to ensure we stay as close as possible to vanilla Emacs. The Consult online documentation provides detailed descriptions of these enhanced commands.

#+begin_src elisp :exports none
  ;; Consult convenience functions
#+end_src
#+begin_src elisp
  (use-package consult 
    :bind (("C-c w h" . consult-org-heading) 
           ("C-c w g" . consult-grep)) 
    :config (setq read-buffer-completion-ignore-case t) 
    (setq read-file-name-completion-ignore-case t) 
    (setq completion-ignore-case t))
#+end_src

Consult Notes is a convenience package that builds on Consult. It provides access to Denote files and also lets you search through your notes.

#+begin_src elisp :exports none
  ;; Consult-Notes for easy access to notes
#+end_src
#+begin_src elisp
  (use-package consult-notes 
    :bind (("C-c w d f" . consult-notes) 
           ("C-c w d g" . consult-notes-search-in-all-notes)) 
    :init (consult-notes-denote-mode))
#+end_src

The Citar-Denote package lets you create a many-to-many relationship between your Denote notes and items in your bibliography.

#+begin_src elisp :exports none
  ;; Citar-Denote to manage literature notes
#+end_src
#+begin_src elisp
  (use-package citar-denote 
    :custom (citar-open-always-create-notes t) 
    :init (citar-denote-mode) 
    :bind (("C-c w b c" . citar-create-note) 
           ("C-c w b n" . citar-denote-open-note) 
           ("C-c w b x" . citar-denote-nocite) 
           :map org-mode-map ("C-c w b k" . citar-denote-add-citekey) 
           ("C-c w b K" . citar-denote-remove-citekey) 
           ("C-c w b d" . citar-denote-dwim) 
           ("C-c w b e" . citar-denote-open-reference-entry)))
#+end_src

The Denote-Explore package provides convenience functions to manage your collection of notes and attachments.

#+begin_src elisp :exports none
  ;; Explore and manage your Denote collection
#+end_src
#+begin_src elisp
  (use-package denote-explore 
    :bind (;; Statistics
           ("C-c w x c" . denote-explore-count-notes) 
           ("C-c w x C" . denote-explore-count-keywords) 
           ("C-c w x b" . denote-explore-barchart-keywords) 
           ("C-c w x e" . denote-explore-barchart-filetypes)
           ;; Random walks
           ("C-c w x r" . denote-explore-random-note) 
           ("C-c w x l" . denote-explore-random-link) 
           ("C-c w x k" . denote-explore-random-keyword) 
           ("C-c w x x" . denote-explore-random-regex)
           ;; Denote Janitor
           ("C-c w x d" . denote-explore-identify-duplicate-notes) 
           ("C-c w x z" . denote-explore-zero-keywords) 
           ("C-c w x s" . denote-explore-single-keywords) 
           ("C-c w x o" . denote-explore-sort-keywords) 
           ("C-c w x w" . denote-explore-rename-keyword)
           ;; Visualize denote
           ("C-c w x n" . denote-explore-network) 
           ("C-c w x v" . denote-explore-network-regenerate) 
           ("C-c w x D" . denote-explore-degree-barchart)))
#+end_src

* Production
** Managing the writing process
The EWS repository provides some Org-related convenience files for inserting notes, drawers, and counting words. At this stage, the screenshot command is experimental.

#+begin_src elisp :exports none
  ;; Set some Org mode shortcuts
#+end_src
#+begin_src elisp
  (use-package org 
    :bind (:map org-mode-map ("C-c w n" . ews-org-insert-notes-drawer) 
                ("C-c w p" . ews-org-insert-screenshot) 
                ("C-c w c" . ews-org-count-words)))
#+end_src

The Olivetti package removes distractions from the screen and converts your Emacs session to an electronic typewriter. The ~ews-olivetti~ function stores the screen configuration before you activate the distraction-free writing mode. When you disable Olivetti mode with this function then the original configuration is restored.

#+begin_src elisp :exports none
  ;; Distraction-free writing
#+end_src
#+begin_src elisp
  (use-package olivetti 
    :demand t 
    :bind (("C-c w o" . ews-olivetti)))
#+end_src

Undo-Tree provides a graphical view of the various versions of the current buffer.

#+begin_src elisp :exports none
  ;; Undo Tree
#+end_src
#+begin_src elisp
  (use-package undo-tree 
    :config (global-undo-tree-mode) 
    :custom (undo-tree-auto-save-history nil) 
    :bind (("C-c w u" . undo-tree-visualize)))
#+end_src

** Citations
This configuration sets the global bibliography equal to the ~ews-bibtex-files~ variable. To set this variable, configure the ~ews-bibtex-directory~ to register bibliography files and run the ~ews-bibtex-register~ function every time you add new bib-files.

#+begin_src elisp :exports none
  ;; Export citations with Org Mode
#+end_src
#+begin_src elisp
  (require 'oc-natbib)
  (require 'oc-csl)

  (setq org-cite-global-bibliography ews-bibtex-files org-cite-insert-processor 'citar org-cite-follow-processor 'citar org-cite-activate-processor 'citar)
#+end_src

** Quality assurance
Emacs can hook into the dictionary server at =dict.org= and the Powerthesaurus package integrates with =powerthesaurus.org=.

#+begin_src elisp :exports none
  ;; Lookup words in the online dictionary
#+end_src
#+begin_src elisp
  (use-package dictionary 
    :custom (dictionary-server "dict.org") 
    :bind (("C-c w s d" . dictionary-lookup-definition)))
#+end_src
#+begin_src elisp
  (use-package powerthesaurus 
    :bind (("C-c w s p" . powerthesaurus-transient)))
#+end_src

The Writegood package helps to detect weasel words, passive writing, and repeated words. It also contains functions to estimate a text's complexity using the Flesch-Kincaid test.

#+begin_src elisp :exports none
  ;; Writegood-Mode for weasel words, passive writing and repeated word detection
#+end_src
#+begin_src elisp
  (use-package writegood-mode 
    :bind (("C-c w s r" . writegood-reading-ease) 
           ("C-c w s l" . writegood-grade-level)) 
    :hook (text-mode . writegood-mode))
#+end_src

The TitleCase package strives for the most accurate title-casing of sentences, lines, and regions of text in English prose. You can customize the ~titlecase-style~ variable 

The EWS convenience function can do this for all headings in an Org file to ensure consistency.

#+begin_src elisp :exports none
  ;; Titlecasing
#+end_src
#+begin_src elisp
  (use-package titlecase 
    :bind (("C-c w s t" . titlecase-dwim) 
           ("C-c w s c" . ews-org-headings-titlecase)))
#+end_src

** Abbreviations
Abbrev mode is a built-in program that helps you speed up your writing by defining abbreviations and common spelling mistakes and automatically replacing them with words, sentences, or complete paragraphs.

#+begin_src elisp :exports none
  ;; Abbreviations
#+end_src
#+begin_src elisp
  (add-hook 'text-mode-hook 'abbrev-mode)
#+end_src

The Lorem Ipsum generator can be helpful when designing a document's layout. This package inserts dummy Latin text into a buffer. 

#+begin_src elisp :exports none
  ;; Lorem Ipsum generator
#+end_src
#+begin_src elisp
  (use-package lorem-ipsum 
    :custom (lorem-ipsum-list-bullet "- ") ;; Org mode bullets
    :init (setq lorem-ipsum-sentence-separator (if sentence-end-double-space "  " " ")) 
    :bind (("C-c w s i" . lorem-ipsum-insert-paragraphs)))
#+end_src

** Version control
The built-in Ediff package compares different files and shows their differences. It also lets you decide how to merge the two versions, like a tracked-changes function in a Word processor. The ~ediff~ family of functions does not split its windows nicely by default, so these settings make the program more straightforward to use.

Advanced version control requires a Version Control System, such as Git.

#+begin_src elisp :exports none
  ;; ediff
#+end_src
#+begin_src elisp
  (use-package ediff 
    :ensure nil 
    :custom (ediff-keep-variants nil) 
    (ediff-split-window-function 'split-window-horizontally) 
    (ediff-window-setup-function 'ediff-setup-windows-plain))
#+end_src

** Other text in modes
Org is fantastic, but it is not the only text mode useful for authors. EWS installs both Markdown and Fountain.

#+begin_src elisp :exports none
  ;; Enable Other text modes

  ;; Fontain mode for writing scrits
#+end_src
#+begin_src elisp
  (use-package fountain-mode)
#+end_src
#+begin_src elisp :exports none
  ;; Markdown mode
#+end_src
#+begin_src elisp
  (use-package markdown-mode)
#+end_src

* Publication
** Basic settings
This snippet sets some basic export settings for org mode. You can either set  these as variable to apply them to all files by default, or insert them as keywords in your front matter. 

Read the Export Settings section in to Org manual for a detailed description of the possible configurations.

The timestamp for exporting files is set to the European date format of day, month, and year. If you publish for American audiences, perhaps you like to modify the ~org-export-date-timestamp-format~ to ="%B %e %Y"=. These letters stand for the full name of the month, the day number without leading zero, and the year in four digits. See the documentation of the ~format-time-string~ function for details on how to format dates in other methods.

#+begin_src elisp :exports none
  ;; PUBLICATION

  ;; Generic Org Export Settings
#+end_src
#+begin_src elisp
  (use-package org 
    :custom (org-export-with-drawers nil) 
    (org-export-with-todo-keywords nil) 
    (org-export-with-toc nil) 
    (org-export-with-smart-quotes t) 
    (org-export-date-timestamp-format "%e %B %Y"))
#+end_src

** Epub
The ox-ePub package exports Org files to the most common e-book format. The ~ox-org~  export is required to enable exporting to Org to prevent issues with the table of contents. 

#+begin_src elisp :exports none
  ;; epub export
#+end_src
#+begin_src elisp
  (use-package ox-epub 
    :demand t 
    :init (require 'ox-org))
#+end_src

** Latex

This configuration part defines the export process from Org to TeX to PDF. This setup also removes any temporary files created in the process. You will obviously need a working version of LaTeX with all relevant packages  installed on your computer.

#+begin_src elisp :exports none
  ;; LaTeX PDF Export settings
#+end_src
#+begin_src elisp
  (use-package ox-latex 
    :ensure nil 
    :demand t 
    :custom
    ;; Multiple LaTeX passes for bibliographies
    (org-latex-pdf-process '("pdflatex -interaction nonstopmode -output-directory %o %f" "bibtex %b" "pdflatex -shell-escape -interaction nonstopmode -output-directory %o %f" "pdflatex -shell-escape -interaction nonstopmode -output-directory %o %f"))
    ;; Clean temporary files after export
    (org-latex-logfiles-extensions (quote ("lof" "lot" "tex~" "aux" "idx" "log" "out" "toc" "nav" "snm" "vrb" "dvi" "fdb_latexmk" "blg" "brf" "fls" "entoc" "ps" "spl" "bbl" "tex" "bcf"))))
#+end_src

The next part defines the EWS document class, which is used to produce the paperback version of this book.

The first part of the code defines the name used in the Org file, in this case =#+latex_class: ews=. The next par is the preamble in LaTeX code. Note that backslashes need to be escaped by using two of them. Org also adds standard packages, read the documentation for ~org-latex-classes~ for details on how to modify the standard inclusions.

The last section defines how the heading levels in the Org file are translated to LaTeX commands. This code defines the first three Org heading levels.

#+begin_src elisp :exports none
  ;; EWS paperback configuration
#+end_src
#+begin_src elisp
  (with-eval-after-load 'ox-latex (add-to-list 'org-latex-classes '("ews" "\\documentclass[11pt, twoside, hidelinks]{memoir}
        \\setstocksize{9.25in}{7.5in}
        \\settrimmedsize{\\stockheight}{\\stockwidth}{*}
        \\setlrmarginsandblock{2cm}{1cm}{*}
        \\setulmarginsandblock{1.5cm}{2.25cm}{*}
        \\checkandfixthelayout
        \\setcounter{tocdepth}{0}
        \\OnehalfSpacing
        \\usepackage{ebgaramond}
        \\usepackage[htt]{hyphenat}
        \\chapterstyle{bianchi}
        \\setsecheadstyle{\\normalfont \\raggedright \\textbf}
        \\setsubsecheadstyle{\\normalfont \\raggedright \\textbf}
        \\setsubsubsecheadstyle{\\normalfont\\centering}
        \\renewcommand\\texttt[1]{{\\normalfont\\fontfamily{cmvtt}
          \\selectfont #1}}
        \\usepackage[font={small, it}]{caption}
        \\pagestyle{myheadings}
        \\usepackage{ccicons}
        \\usepackage[authoryear]{natbib}
        \\bibliographystyle{apalike}
        \\usepackage{svg}" ("\\chapter{%s}" . "\\chapter*{%s}") 
        ("\\section{%s}" . "\\section*{%s}") 
        ("\\subsection{%s}" . "\\subsection*{%s}") 
        ("\\subsubsection{%s}" . "\\subsubsection*{%s}"))))
#+end_src

* Administration
** Getting Things Done
The Org configuration for managing actions and projects sets a custom agenda item that shows the agenda for the next three days, a list of to-do items marked =NEXT=, and a list of items marked =WAIT=.

The ~org-agenda-custom-commands~ variable provides a highly flexible system for crafting agenda views. You could, for example, build an agenda for your private actions and one for your work.

#+begin_src elisp :exports none
  ;;; ADMINISTRATION

  ;; Bind org agenda command and custom agenda
#+end_src
#+begin_src elisp
  (use-package org 
    :custom (org-agenda-custom-commands '(("e" "Agenda, next actions and waiting" ((agenda "" ((org-agenda-overriding-header "Next three days:") 
                                                                                               (org-agenda-span 3) 
                                                                                               (org-agenda-start-on-weekday nil))) 
                                                                                   (todo "NEXT" ((org-agenda-overriding-header "Next Actions:"))) 
                                                                                   (todo "WAIT" ((org-agenda-overriding-header "Waiting:"))))))) 
    :bind (("C-c a" . org-agenda)))
#+end_src

** Manage files
The Dired package is a convenient and powerful tool for organising your drives and accessing your information. Dired lists files and directories in alphabetical order. I prefer a different view, which shows directories on top and files below them. The ~dired-listing-switches~ variable determines how files are displayed in a Dired buffer.

The ~dired-dwim-target~ variable instructs to guess a default target directory. This means that if a Dired buffer is displayed in some window, use that directory instead of this Dired buffer's current directory.

The ~delete-by-moving-to-trash~ variable moves deleted files to the wastebasket instead of vanishing them into thin air.

The last line enables opening new directories in the same buffer as the current one (using the =a= key), preventing littering your session with Dired buffers. The first time you use this, Emacs asks you to confirm whether you would like to use this option.

#+begin_src elisp :exports none
  ;; FILE MANAGEMENT
#+end_src
#+begin_src elisp
  (use-package dired 
    :ensure nil 
    :commands (dired dired-jump) 
    :custom (dired-listing-switches "-goah --group-directories-first --time-style=long-iso") 
    (dired-dwim-target t) 
    (delete-by-moving-to-trash t) 
    :init (put 'dired-find-alternate-file 'disabled nil))
#+end_src

The default setting for Dired is to show hidden files, even though they are hidden for a reason. This configuration uses ~dired-omit-mode~ to remove
these hidden files from view. You can toggle this behaviour with the full stop key.

#+begin_src elisp :exports none
  ;; Hide or display hidden files
#+end_src
#+begin_src elisp
  (use-package dired 
    :ensure nil 
    :hook (dired-mode . dired-omit-mode) 
    :bind (:map dired-mode-map ( "."     . dired-omit-mode)) 
    :custom (dired-omit-files "^\\.[a-zA-Z0-9]+"))
#+end_src

The ~dired-narrow~ package provides some convenience functions to filter a Dired buffer by a search criterion or a regular expression. 

#+begin_src R
  (use-package dired-narrow)
#+end_src

This next bit of configuration defines how Emacs manages automated backups. The default setting is that the system stores these files in the folder where the original files live, cluttering folders with copies of your stuff.

The setting below modifies the =backup-directory-alist= variable so that Emacs saves all backups (indicated by ="."=) in the =bak= subdirectory of your init folder. Alternatively, you could instruct Emacs not to save backups with ~(setq-default make-backup-files nil)~. I prefer keeping backups as they have saved my bacon a few times.

This configuration also eliminates lock files, which are only useful when working in shared folders. Lock files prevent other users from opening a file when another user is already editing it, but create a lot of clutter when writing by yourself. Change this variable to =t= if you collaborate with others or maintain fles on multiple systems through a file-sharing service such as Nextcloud.

#+begin_src elisp :exports none
  ;; Backup files
#+end_src
#+begin_src elisp
  (setq-default backup-directory-alist `(("." . ,(expand-file-name "backups/" user-emacs-directory))) version-control t delete-old-versions t create-lockfiles nil)
#+end_src

Emacs saves a list of recent files using the =recentf= package. This package maintains a list of recently opened files and makes it easy to visit them. The recent files list is automatically saved across Emacs sessions. By default, the recent files mode stores the last twenty opened files, which you can change by adjusting the ~recentf-max-saved-items~ variable, which in EWS is fifty.

#+begin_src elisp :exports none
  ;; Recent files
#+end_src
#+begin_src elisp
  (use-package recentf 
    :config (recentf-mode t) 
    :custom (recentf-max-saved-items 50) 
    :bind (("C-c w r" . recentf-open)))
#+end_src

This last file package enables you to set bookmarks for your favourite locations. The ~bookmark-save-flag~ is set to one, so the bookmarks file is saved every time you add a new one. The default value only saves it when you exit Emacs, which means you could lose bookmarks in the unlikely event of an Emacs or system crash.

#+begin_src elisp :exports none
  ;; Bookmarks
#+end_src
#+begin_src elisp
  (use-package bookmark 
    :custom (bookmark-save-flag 1) 
    :bind ("C-x r d" . bookmark-delete))
#+end_src

** Viewing images
Emacs has two modes for viewing and managing images. The image viewer shows individual images, but you can also browse through a directory with the left and right arrow keys.

To enable image manipulation, you will need to install ImageMagic.

Using =C-<ret>= opens an image in the Dired buffer in your favourite editor. The ~image-dired-external-viewer~ variable defines the program you use to edit pictures, in my case GIMP, the GNU Image Manipulation Program.

#+begin_src elisp :exports none
  ;; Image viewer
#+end_src
#+begin_src elisp
  (use-package emacs 
    :custom (image-dired-external-viewer "gimp") 
    :bind ((:map image-mode-map ("k" . image-kill-buffer) 
                 ("<right>" . image-next-file) 
                 ("<left>"  . image-previous-file)) 
           (:map dired-mode-map ("C-<return>" . image-dired-dired-display-external))))
#+end_src

The built-in Image-Dired package can generate thumbnails from within a Dired buffer and let you work on images from there. 

#+begin_src elisp
  (use-package image-dired 
    :bind (("C-c w I" . image-dired)) 
    (:map image-dired-thumbnail-mode-map ("C-<right>" . image-dired-display-next) 
          ("C-<left>"  . image-dired-display-previous)))
#+end_src

* Advanced export settings for EWS                                  :noexport:
#+begin_src elisp
  ;; ADVANCED UNDOCUMENTED EXPORT SETTINGS FOR EWS

  ;; Use GraphViz for flow diagrams
  ;; requires GraphViz software
  (org-babel-do-load-languages 'org-babel-load-languages '((dot . t))) ; this line activates GraphViz dot
#+end_src
